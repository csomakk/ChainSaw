<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:Classes="csplayer.Classes.*"
         creationComplete="onCreationComplete(event)"
         doubleClick="onDoubleClick(event)"
         width="100%" height="100%">
    <fx:Script>
		<![CDATA[
        import csplayer.Classes.*;
        import csplayer.Components.Control;

        import mx.controls.Alert;
        import mx.events.FlexEvent;

        public static const YT_PREFIX:String = "yt://";

        [Bindable]
        protected var player:Object;
        protected var timer:Timer;
        public var isReady:Boolean = false;
        public var lastID:String;
        protected var loader:SafeLoader = new SafeLoader();

        public static var instance:YoutubePlayer;

        protected function onCreationComplete(event:FlexEvent):void {
            instance = this;
            trace("youtubePlayer: init");
            //Security.loadPolicyFile("http://www.youtube.com/crossdomain.xml");
            loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
            loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3&enablejsapi=1"));
        }

        protected function onLoaderInit(event:Event):void {
            trace("youtubePlayer: onLoader");
            loader.content.addEventListener(YouTubeEvent.UNCAUGHT_ERROR, onUncaugthError);
            loader.content.addEventListener(YouTubeEvent.READY, onPlayerReady);
            loader.content.addEventListener(YouTubeEvent.ERROR, onPlayerError);
            loader.content.addEventListener(YouTubeEvent.STATE_CHANGE, onPlayerStateChange);
            loader.content.addEventListener(YouTubeEvent.PLAYBACK_QUALITY_CHANGE, onVideoPlaybackQualityChange);

        }

        /** num is 0-100*/
        public function setVolume(number0to100:Number):void {
            player.setVolume(number0to100);
        }

        /** Returns the elapsed time in seconds since the video started playing. */
        public function get elapsedTime():Number {
            return player.getCurrentTime();
        }

        /** Returns the elapsed time in seconds since the video started playing. */
        public function get duration():Number {
            return player.getDuration();
        }

        /**Returns a number between 0 and 1 that specifies the percentage of the video that the
         * player shows as buffered. This method returns a more reliable number than the
         * now-deprecated getVideoBytesLoaded and getVideoBytesTotal methods.*/
        public function get bufferedPercent():Number {
            return player.getVideoLoadedFraction();
        }

        public function pause():void {
            player.pauseVideo();
        }

        public function loadVideo(id:String):void {
            if (id == lastID) {
                player.playVideo();
            } else {
                lastID = id;
                player.cueVideoById(id);
                trace("youtubePlayer: playing", id);
                player.playVideo();
            }

            timer = new Timer(1000 / 24, 0);
            timer.addEventListener(TimerEvent.TIMER, updateSlider);
            timer.start();
        }

        /**return between 0 and 100 */
        public function getLoadedPercent():Number {
            return player.getVideoLoadedFraction() * 100;
        }


        protected function onPlayerReady(event:Event):void {
            player = loader.content;

            swfLoader.load(player);
            swfLoader.moveContentToYoutubePlayerStage();
            isReady = true;
            Control.instance.soundChannel.onYTReady();
        }


        protected function updateSlider(e:Event):void {
            Control.instance.seekSlider.bufferPosition = bufferedPercent;
            Control.instance.seekSlider.value = elapsedTime / duration;
        }

        protected static function onSwfLoaderSecurityErrorHandler(event:SecurityErrorEvent):void {
            trace("youtubePlayer: swfLoader_securityErrorHandler", event);
        }

        protected static function onPlayerError(event:Event):void {
            trace("youtubePlayer: onPlayerError", Object(event).data, "Error");
            var err:Number = Object(event).data;
            if (err == 100 || err == 101 || err == 150)
                Alert.show("The video has been marked private or the embedded playback is disabled by the owner, or the owner of Youtube. please find an alternative to this video. bocsika..", "Unable to play video")
        }

        protected static function onPlayerStateChange(event:Event):void {
            trace("youtubePlayer: player state:", Object(event).data);
            if (Object(event).data == YouTubeState.ENDED) {
                Control.instance.nextSong();
            }
        }

        protected static function onVideoPlaybackQualityChange(event:Event):void {
            trace("youtubePlayer: video quality:", Object(event).data);
        }

        protected static function onIOError(event:IOErrorEvent):void {
            trace("youtubePlayer: onIOERROR", event)
        }

        protected function toggleFullScreen(event:MouseEvent = null):void {
            /* if(stage.displayState == StageDisplayState.FULL_SCREEN_INTERACTIVE){
             stage.displayState = StageDisplayState.NORMAL;
             backFromFullWindow();
             } else {
             stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
             onFullWindow();
             } */
            if (x == 0) {
                backFromFullWindow();
            } else {
                onFullWindow();
            }
        }


        protected function onFullWindow(event:MouseEvent = null):void {
            left = 0;

            y = 0;
            bottom = 0;
            top = 0;

        }

        private function backFromFullWindow():void {
            width = 110;
            right = 0;
            left = undefined;

            height = 62;
            top = 0;
            bottom = undefined;
        }

        protected static function onUncaugthError(event:Event):void {
            //error in ad.
            trace("YoutubePlayer: onUncaugthError");
            event.stopImmediatePropagation();
            event.stopPropagation();
        }

        protected function onDoubleClick(event:MouseEvent):void {
            toggleFullScreen();
        }
        ]]>
	</fx:Script>
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:SolidColor color="0x000000"/>
        </s:fill>
    </s:Rect>
    <mx:UIComponent id="flexSpriteHolder"
                    width="100%" height="100%"/>
    <Classes:SafeSWFLoader id="swfLoader"
                           x="10" y="0" width="100%" height="100%"
                           autoLoad="true" maintainAspectRatio="true" scaleContent="true"
                           securityError="onSwfLoaderSecurityErrorHandler(event)"/>
    <s:Image id="toggleFullScreenImg" left="0" width="20" height="20"
             click="toggleFullScreen(event)" smooth="true"
             source="@Embed('/assets/icons/1350159271_gtk-leave-fullscreen.png')" verticalCenter="0"/>
</s:Group>