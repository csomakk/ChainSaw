<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:Classes="csplayer.Classes.*"
         creationComplete="onCreationComplete(event)"
         doubleClick="group1_doubleClickHandler(event)"
         width="100%" height="100%">
    <fx:Script>
		<![CDATA[
        import csplayer.Components.Control;

        import mx.controls.Alert;
        import mx.events.FlexEvent;

        public static var YT_UNSTARTED:int = -1;
        public static var YT_ENDED:int = 0;
        public static var YT_PLAYING:int = 1;
        public static var YT_PAUSED:int = 2;
        public static var YT_BUFFERING:int = 3;
        public static var YT_CUED:int = 5;

        protected var loader:SafeLoader = new SafeLoader();
        [Bindable]
        protected var player:Object;
        protected var timer:Timer;
        public var isReady:Boolean = false;
        [Bindable]
        public var rolled:Boolean = false;

        public static var instance:YoutubePlayer;

        protected function onCreationComplete(event:FlexEvent):void {
            instance = this;
            trace("youtubePlayer: init");
            //Security.loadPolicyFile("http://www.youtube.com/crossdomain.xml");
            loader.contentLoaderInfo.addEventListener(Event.INIT, onLoaderInit);
            loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
            loader.load(new URLRequest("http://www.youtube.com/apiplayer?version=3&enablejsapi=1"));
        }

        protected function onLoaderInit(event:Event):void {
            trace("youtubePlayer: onLoader");
            loader.content.addEventListener("uncaughtError", onUncaugthError);
            loader.content.addEventListener("onReady", onPlayerReady);
            loader.content.addEventListener("onError", onPlayerError);
            loader.content.addEventListener("onStateChange", onPlayerStateChange);
            loader.content.addEventListener("onPlaybackQualityChange", onVideoPlaybackQualityChange);

        }

        /** num is 0-100*/
        public function setVolume(num:Number):void {
            player.setVolume(num);
        }

        public function loadVideo(id:String):void {
            player.cueVideoById(id);
            trace("youtubePlayer: playing", id);
            player.playVideo();


            timer = new Timer(1000 / 24, 0);
            timer.addEventListener(TimerEvent.TIMER, refreshTekero);
            timer.start();
        }

        /**return between 0 and 100 */
        public function getLoadedPercent():Number {
            return player.getVideoLoadedFraction() * 100;
        }


        protected function onPlayerReady(event:Event):void {
            player = loader.content;

            swfLoader.load(player);
            swfLoader.moveContentToYoutubePlayerStage();
            isReady = true;
            Control.instance.soundChannel.onYTReady();
        }


        protected function refreshTekero(e:Event):void {

        }

        protected function swfLoader_securityErrorHandler(event:SecurityErrorEvent):void {
            trace("youtubePlayer: swfLoader_securityErrorHandler", event);
        }

        protected function onPlayerError(event:Event):void {
            trace("youtubePlayer: onPlayerError", Object(event).data, "Error");
            var err:Number = Object(event).data;
            if (err == 100 || err == 101 || err == 150)
                Alert.show("The video has been marked private or the embedded playback is disabled by the owner, or the owner of Youtube. please find an alternative to this video. bocsika..", "Unable to play video")
        }

        protected function onPlayerStateChange(event:Event):void {
            trace("youtubePlayer: player state:", Object(event).data);
            if (Object(event).data == YT_ENDED) {
                Control.instance.nextSong();
            }
        }

        protected function onVideoPlaybackQualityChange(event:Event):void {
            trace("youtubePlayer: video quality:", Object(event).data);
        }

        protected function onIOError(event:IOErrorEvent):void {
            trace("youtubePlayer: onIOERROR", event)
        }

        protected function toggleFullScreen(event:MouseEvent = null):void {
            /* if(stage.displayState == StageDisplayState.FULL_SCREEN_INTERACTIVE){
             stage.displayState = StageDisplayState.NORMAL;
             backFromFullWindow();
             } else {
             stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
             onFullWindow();
             } */
            if (x == 0) {
                backFromFullWindow();
            } else {
                onFullWindow();
            }
        }


        protected function onFullWindow(event:MouseEvent = null):void {
            left = 0;

            y = 0;
            bottom = 0;
            top = 0;

        }

        private function backFromFullWindow():void {
            width = 110;
            right = 0;
            left = undefined;

            height = 62;
            top = 0;
            bottom = undefined;
        }

        protected function onUncaugthError(event:Event):void {
            trace("YoutubePlayer: onUncaugthError");
            event.stopImmediatePropagation();
            event.stopPropagation();
        }

        protected function group1_doubleClickHandler(event:MouseEvent):void {
            toggleFullScreen();
        }
        ]]>
	</fx:Script>
    <s:Rect width="100%" height="100%">
        <s:fill>
            <s:SolidColor color="0x000000"/>
        </s:fill>
    </s:Rect>
    <mx:UIComponent id="flexSpriteHolder"
                    width="100%" height="100%"/>
    <Classes:SafeSWFLoader id="swfLoader"
                           x="10" y="0" width="100%" height="100%"
                           autoLoad="true" maintainAspectRatio="true" scaleContent="true"
                           securityError="swfLoader_securityErrorHandler(event)"/>
    <s:Image id="toggleFullScreenImg" left="0" width="20" height="20"
             click="toggleFullScreen(event)" smooth="true"
             source="@Embed('/icons/1350159271_gtk-leave-fullscreen.png')" verticalCenter="0"/>
</s:Group>