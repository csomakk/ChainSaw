<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         initialize="onInit(event)"
         creationComplete="onCreationComplete(event)"
         keyDown="onKeyDown(event)"
         width="214" height="300"
         title="Tag as:">

    <fx:Script>
		<![CDATA[
        import csplayer.Classes.SoundTrack;
        import csplayer.Classes.Tag;
        import csplayer.Classes.TagManager;

        import mx.collections.ArrayCollection;
        import mx.events.FlexEvent;
        import mx.events.FlexMouseEvent;
        import mx.managers.PopUpManager;

        import spark.components.Group;
        import spark.events.IndexChangeEvent;
        import spark.events.TextOperationEvent;

        protected var selectedSoundTracks:Vector.<SoundTrack> = new Vector.<SoundTrack>();

        [Bindable]
        protected var filteredTags:ArrayCollection;

        protected function onInit(event:FlexEvent):void {
            refreshAvailableTags();
        }

        protected function onCreationComplete(event:FlexEvent):void {
            addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, close);
        }

        public function setSoundTracks(st:Object):void {
            for each (var soundTrack:Object in st) {
                if (soundTrack is SoundTrack) selectedSoundTracks.push(soundTrack);
            }

            list.addEventListener(IndexChangeEvent.CHANGE, onListSelection);
        }

        protected function refreshAvailableTags():void {
            filteredTags = new ArrayCollection();
            for (var j:int = 0; j < TagManager.instance.tags.length; j++) {
                filteredTags.addItem(TagManager.instance.tags[j]);
            }
            filteredTags.filterFunction = searchFilter;
        }

        protected function onListSelection(event:IndexChangeEvent):void {
            changeTag(list.selectedItem as Tag);
        }

        protected function changeTag(tag:Tag):void {
            for each(var s:SoundTrack in selectedSoundTracks) {
                s.addTag(tag);
            }

            close();
        }

        public function close(e:Event = null):void {
            try {
                (parent as Group).removeElement(this);
            } catch (err:Error) {
                PopUpManager.removePopUp(this);
            }
        }

        protected function onKeyDown(event:KeyboardEvent):void {
            if (event.keyCode == Keyboard.ESCAPE) {
                close();
            }
        }

        protected function onSearchTextInputEnter(event:FlexEvent):void {
            var t:Tag = new Tag(searchTextInput.text);
            TagManager.instance.addTag(t);
            changeTag(t);
        }

        protected function searchFilter(item:Object):Boolean {
            return Tag(item).nameWithoutSpecs().search(searchTextInput.text) != -1;
        }

        protected function onSearchTextInputChange(event:TextOperationEvent):void {
            filteredTags.refresh();
        }
        ]]>
	</fx:Script>


    <s:TextInput id="searchTextInput"
                 x="10" y="10" width="170"
                 change="onSearchTextInputChange(event)"
                 enter="onSearchTextInputEnter(event)"/>
    <s:Image y="11" right="8" width="21" height="21" smooth="true"
             source="@Embed('/assets/icons/search.png')"/>
    <s:List id="list"
            dataProvider="{ filteredTags }"
            itemRenderer="csplayer.Components.LabelRenderer2"
            left="10" right="9" top="40" bottom="10">
    </s:List>
    <s:Image y="-25" right="6" width="19" height="19" smooth="true"
             click="close(event)"
             source="@Embed('/assets/icons/1341143725_cancel.png')"/>
</s:Panel>
